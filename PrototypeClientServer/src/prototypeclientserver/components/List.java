/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package prototypeclientserver.components;

import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionListener;
import prototypeclientserver.Order;


/**
 *
 * @author stephenfleming
 */
public class List extends javax.swing.JPanel {
    //data model for the waiting list
    private DefaultListModel<Order> listDataModel;
    
    /**
     * Creates new form List
     */
    public List() {
        initComponents();
        
        clearList();
        
        listDataModel = (DefaultListModel)list.getModel();
    }
    
    /**
     * Takes the index of an item, moves it to the served list and removes it from the waiting list
     */
    public void removeSelectedItemFromList() {    
        listDataModel.remove(list.getSelectedIndex());
    }
    
    /**
     * Find the currently selected order and return it, null if empty
     * @return Currently selected order in list
     */
    public Order getSelectedOrder() {
        return listDataModel.get(list.getSelectedIndex());
    }
    
    /**
     * Adds an order to the waiting JTable
     * @param order order to insert
     */
    public void addOrderToList(Order order) {
        listDataModel.add(listDataModel.size(), order);
    }
    
    /**
     * Adds ListSelectionListener to the waiting list
     * @param evt ListSelectionListener to add
     */
    public void addListSelectionEventListenerToList(ListSelectionListener evt) {
        list.addListSelectionListener(evt);    
    }
    
    /**
     * Getter for number of orders in waiting list
     * @return number of orders in waiting list integer
     */
    public int getNumberOfListItems() {
        return listDataModel.size();
    }
    
    /**
     * Boolean check to see if an item is selected 
     * @return true if an item is selected, else false
     */
    public boolean isListItemSelected() {
        return (list.getSelectedIndex() != -1);
    }
    /**
     * Boolean check to see if selected served order has been billed
     * @return true if selected item has been billed, else false
     */
    public boolean hasSelectedServedOrderBeenBilled() {
        return listDataModel.get(list.getSelectedIndex()).isBilled();
    }
 
     /**
     * Clears list of all rows and their contents
     */
    public void clearList() {
        DefaultListModel m = new DefaultListModel();
        m.clear();
        list.setModel(m);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();

        list.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(list);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> list;
    // End of variables declaration//GEN-END:variables
}
